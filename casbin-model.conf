# See https://casbin.org/docs/en/abac#scaling-the-model-for-complex-and-large-number-of-abac-rules
[request_definition]
r = sub, obj, act

[policy_definition]
# 请求者，访问对象，行为，规则
p = sub, obj, act, rul

[policy_effect]
e = some(where (p.eft == allow))

[matchers]
## ACL 与 ABAC 混合模型：
#
# 如果策略中存在 sub，则需要和实际请求者匹配，
# 如果策略中存在 obj，则需要和实际请求对象匹配，
# 如果策略中存在 act，则需要和实际行为匹配，
# 如果策略中存在 rul，则必须在请求上下文中解析为“真”。
#
# 策略中的前三个要素均可以为 "*" 表示忽略匹配该要素。
#
# 一个简单的 ACL 策略并不需要额外的“规则”，
# 填写为 "True" 即可。
#
# 典型的 ABAC 策略举例：
#
#   p, *, *, view-project, r.sub.id in r.obj.memebers
#
# 表示：当请求者 ID 在项目 members 列表中时，
# 其具有 view-project 权限。
#
##
m = (p.sub == '*' || r.sub == p.sub) && \
    (p.obj == '*' || r.obj == p.obj) && \
    (p.act == '*' || r.act == p.act) && \
    eval(p.rul)
